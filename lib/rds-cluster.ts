import { Construct, SecretValue, Duration } from '@aws-cdk/core';
import { Vpc, SubnetType, SecurityGroup } from '@aws-cdk/aws-ec2';
import {
  SubnetGroup,
  Credentials,
  ServerlessCluster,
  DatabaseClusterEngine,
  AuroraMysqlEngineVersion,
  AuroraCapacityUnit,
} from '@aws-cdk/aws-rds';

export interface RdsClusterProps {
  vpc: Vpc;
  securityGroup: SecurityGroup;
}

export class RdsCluster extends Construct {
  public readonly instanceName: string;
  public readonly hostname: string;
  public readonly userName: string;
  public readonly userPassword: string;

  constructor(scope: Construct, id: string, props: RdsClusterProps) {
    super(scope, id);

    // Configuration
    this.instanceName = 'db';
    this.userName = 'admin';
    this.userPassword = 'Password12345678*';

    // RDS Subnets
    const dbSubnet = new SubnetGroup(this, 'MyRdsSubnetGroup', {
      description: 'Subnet group for db instances placement',
      vpc: props.vpc,
      vpcSubnets: { subnetType: SubnetType.ISOLATED },
    });

    // RDS Credentials
    // TODO: use autogenerated secret
    const password = SecretValue.plainText(this.userPassword);
    const credentials = Credentials.fromUsername(this.userName, { password });

    // RDS CLUSTER
    const cluster = new ServerlessCluster(this, 'MyServerlessCluster', {
      engine: DatabaseClusterEngine.auroraMysql({
        version: AuroraMysqlEngineVersion.VER_2_07_1,
      }),
      clusterIdentifier: 'db-cluster',
      defaultDatabaseName: this.instanceName,
      vpc: props.vpc,
      subnetGroup: dbSubnet,
      securityGroups: [props.securityGroup],
      credentials,
      scaling: {
        autoPause: Duration.minutes(60),
        minCapacity: AuroraCapacityUnit.ACU_1,
        maxCapacity: AuroraCapacityUnit.ACU_2,
      },
      enableHttpEndpoint: true,
      deletionProtection: false, // for dev purposes
    });
    this.hostname = cluster.clusterEndpoint.hostname;
  }
}
